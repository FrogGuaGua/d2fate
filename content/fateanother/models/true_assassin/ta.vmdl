<!-- schema text {7e125a45-3d83-4043-b292-9e24f8ef27b4} generic {198980d8-3a93-4919-b4c6-dd1fb07a3a4b} -->
CVModel CVModel_0
{
	CVmeshList m_meshList = CVmeshList
	{
		CVmesh[] m_meshList = 
		[
			CVmesh
			{
				string m_meshName = "ta"
				string m_meshFile = "models/true_assassin/ta.fbx"
				string m_materialSearchPath = ""
				bool m_bSkinParentedObjects = true
				bool m_bLegacySkinParentedTransforms = false
				bool m_bExpensiveTangents = false
				bool m_bExpensiveVertices = false
				bool m_bIgnoreCloth = false
				bool m_bGetSkinningFromLod0 = false
				CVmorphInfo* m_pMorphInfo = NULL
			}
		]
	}
	CVClothProxyMeshList m_clothProxyMeshList = CVClothProxyMeshList
	{
		CVClothProxyMesh[] m_clothProxyMeshList = 
		[
			
		]
		float m_flClothEnableThreshold = 0.050000
		bool m_bCreateStaticBone = false
		int m_nMaxBonesPerVertex = 4
		bool m_bRemoveUnusedBonesEnabled = false
		bool m_bDriveMeshesWithBacksolvedJointsOnly = true
		float m_flMatchProxiesToMeshes = 1.000000
		float m_flReservedFloat = 0.000000
		int m_nReservedInt = 0
		bool m_bReservedBool1 = false
		bool m_bReservedBool2 = false
		bool m_bReservedBool3 = false
		bool m_bReservedBool4 = false
	}
	CVphysicsMeshList m_physicsMeshList = CVphysicsMeshList
	{
		CVphysicsMesh[] m_meshList = 
		[
			
		]
	}
	CVmodelInfo* m_pModelInfo = NULL
	CVBoneFlagListReference m_pBoneFlagList = CVBoneFlagListReference
	{
		CVBoneFlagList* m_pObject = NULL
		string m_sFileName = ""
	}
	CVhitBoxSetListReference[] m_pHitBoxSetLists = 
	[
		CVhitBoxSetListReference
		{
			CVhitBoxSetList* m_pObject = &CVhitBoxSetList_0
			string m_sFileName = ""
		}
	]
	CVattachmentListReference[] m_pAttachmentLists = 
	[
		CVattachmentListReference
		{
			CVattachmentList* m_pObject = &CVattachmentList_0
			string m_sFileName = ""
		}
	]
	CVanimGroupReference[] m_pAnimGroups = 
	[
		CVanimGroupReference
		{
			CVanimGroup* m_pObject = &CVanimGroup_0
			string m_sFileName = ""
		}
	]
	CVNodeMaterialGroupListReference m_pMaterialGroupList = CVNodeMaterialGroupListReference
	{
		NodeMaterialGroupList_t* m_pObject = NULL
		string m_sFileName = ""
	}
	CVMeshGroupListReference m_pMeshGroupList = CVMeshGroupListReference
	{
		MeshGroupList_t* m_pObject = NULL
		string m_sFileName = ""
	}
	CVLODGroupListReference m_pLodGroupList = CVLODGroupListReference
	{
		LODGroupList_t* m_pObject = NULL
		string m_sFileName = ""
	}
	CVpropBreakableListReference m_pPropBreakableList = CVpropBreakableListReference
	{
		CVpropBreakableList* m_pObject = NULL
		string m_sFileName = ""
	}
	CVpropDataListReference m_pPropDataList = CVpropDataListReference
	{
		CVpropDataList* m_pObject = NULL
		string m_sFileName = ""
	}
	CVConstraintListReference[] m_pConstraintLists = 
	[
		
	]
	string m_collision = ""
	string m_softbody = ""
	string m_sMDLFilename = ""
	string[] m_sOffsetHitboxSets = 
	[
		
	]
	float(3) m_vHitboxSetOffset = ( 0.000000, 0.000000, 0.000000 )
	string[] m_scriptFiles = 
	[
		
	]
	CVMaterialRemapList* m_pMaterialRemapList = &CVMaterialRemapList_0
	float m_flFbxScale = 1.000000
	float m_flQCScale = 1.000000
	float(3) m_vOrigin = ( 0.000000, 0.000000, 0.000000 )
	CVPsf* m_pvPsf = NULL
	string m_keyValueText = ""
	bool m_bStaticProp = false
	bool m_bEnableClothProcessing = true
	float m_flClothEnableThreshold = 0.050000
	int m_nMaxClothVertsPerMesh = 2048
	bool m_bBuildClothBoneHierarchy = false
	symbol m_nNavType = AUTH_NAV_MESH
	bool m_bMakeUniqueVMeshes = false
	bool m_bMakeImplicitBindPoseSequence = false
	bool m_bAdjustSkeletonFromBoneFlags = false
}

CVhitBoxSetList CVhitBoxSetList_0
{
	CVhitBoxSet[] m_HitBoxSets = 
	[
		CVhitBoxSet
		{
			string m_name = "default"
			CVhitBox[] m_HitBoxes = 
			[
				CVhitBox
				{
					string m_name = "bone_chest"
					string m_sSurfaceProperty = ""
					int m_nGroupId = 0
					string m_sBoneName = "bone_chest"
					float(3) m_vMinBounds = ( -80.000000, -80.000000, -80.000000 )
					float(3) m_vMaxBounds = ( 80.000000, 80.000000, 80.000000 )
					uint(4) m_cRenderColor = ( 0, 0, 0, 0 )
				},
				CVhitBox
				{
					string m_name = "bone_pelvis"
					string m_sSurfaceProperty = ""
					int m_nGroupId = 0
					string m_sBoneName = "bone_pelvis"
					float(3) m_vMinBounds = ( -15.172780, -9.843397, -1.736755 )
					float(3) m_vMaxBounds = ( 15.172812, 9.868212, 17.885597 )
					uint(4) m_cRenderColor = ( 0, 0, 0, 0 )
				},
				CVhitBox
				{
					string m_name = "bone_arm1_r"
					string m_sSurfaceProperty = ""
					int m_nGroupId = 0
					string m_sBoneName = "bone_arm1_r"
					float(3) m_vMinBounds = ( -27.503511, -12.848850, -40.799042 )
					float(3) m_vMaxBounds = ( 5.849897, 12.730371, 5.806808 )
					uint(4) m_cRenderColor = ( 0, 0, 0, 0 )
				},
				CVhitBox
				{
					string m_name = "bone_arm1_l"
					string m_sSurfaceProperty = ""
					int m_nGroupId = 0
					string m_sBoneName = "bone_arm1_l"
					float(3) m_vMinBounds = ( -5.849900, -9.232149, -40.799042 )
					float(3) m_vMaxBounds = ( 14.819096, 8.155388, 5.806808 )
					uint(4) m_cRenderColor = ( 0, 0, 0, 0 )
				},
				CVhitBox
				{
					string m_name = "bone_leg1_r"
					string m_sSurfaceProperty = ""
					int m_nGroupId = 0
					string m_sBoneName = "bone_leg1_r"
					float(3) m_vMinBounds = ( -16.196714, -23.888697, -45.156719 )
					float(3) m_vMaxBounds = ( 7.812749, 13.896795, 2.369179 )
					uint(4) m_cRenderColor = ( 0, 0, 0, 0 )
				},
				CVhitBox
				{
					string m_name = "bone_leg1_l"
					string m_sSurfaceProperty = ""
					int m_nGroupId = 0
					string m_sBoneName = "bone_leg1_l"
					float(3) m_vMinBounds = ( -7.812742, -27.433767, -45.156719 )
					float(3) m_vMaxBounds = ( 16.271856, 17.166723, 2.369179 )
					uint(4) m_cRenderColor = ( 0, 0, 0, 0 )
				},
				CVhitBox
				{
					string m_name = "bone_arm2_r"
					string m_sSurfaceProperty = ""
					int m_nGroupId = 0
					string m_sBoneName = "bone_arm2_r"
					float(3) m_vMinBounds = ( -22.383032, -10.526552, 17.360260 )
					float(3) m_vMaxBounds = ( -3.478369, 12.470171, 41.951584 )
					uint(4) m_cRenderColor = ( 0, 0, 0, 0 )
				},
				CVhitBox
				{
					string m_name = "bone_arm2_l"
					string m_sSurfaceProperty = ""
					int m_nGroupId = 0
					string m_sBoneName = "bone_arm2_l"
					float(3) m_vMinBounds = ( -4.502502, -7.108969, -32.639336 )
					float(3) m_vMaxBounds = ( 6.437792, 6.199317, -8.048012 )
					uint(4) m_cRenderColor = ( 0, 0, 0, 0 )
				},
				CVhitBox
				{
					string m_name = "bone_leg2_r"
					string m_sSurfaceProperty = ""
					int m_nGroupId = 0
					string m_sBoneName = "bone_leg2_r"
					float(3) m_vMinBounds = ( -7.392897, -6.653180, -28.697880 )
					float(3) m_vMaxBounds = ( 6.089479, 4.506698, -7.700519 )
					uint(4) m_cRenderColor = ( 0, 0, 0, 0 )
				},
				CVhitBox
				{
					string m_name = "bone_leg2_l"
					string m_sSurfaceProperty = ""
					int m_nGroupId = 0
					string m_sBoneName = "bone_leg2_l"
					float(3) m_vMinBounds = ( -6.089420, -6.653183, -28.697880 )
					float(3) m_vMaxBounds = ( 7.392996, 4.506695, -7.700519 )
					uint(4) m_cRenderColor = ( 0, 0, 0, 0 )
				},
				CVhitBox
				{
					string m_name = "bone_hand_r"
					string m_sSurfaceProperty = ""
					int m_nGroupId = 0
					string m_sBoneName = "bone_hand_r"
					float(3) m_vMinBounds = ( -16.949532, -5.545944, 49.034676 )
					float(3) m_vMaxBounds = ( -8.138634, 5.335064, 50.868759 )
					uint(4) m_cRenderColor = ( 0, 0, 0, 0 )
				},
				CVhitBox
				{
					string m_name = "bone_hand_l"
					string m_sSurfaceProperty = ""
					int m_nGroupId = 0
					string m_sBoneName = "bone_hand_l"
					float(3) m_vMinBounds = ( -4.269194, -5.611409, -16.490303 )
					float(3) m_vMaxBounds = ( 3.668503, 2.988401, 0.868782 )
					uint(4) m_cRenderColor = ( 0, 0, 0, 0 )
				},
				CVhitBox
				{
					string m_name = "bone_head"
					string m_sSurfaceProperty = ""
					int m_nGroupId = 0
					string m_sBoneName = "bone_head"
					float(3) m_vMinBounds = ( -7.402800, -12.033241, -145.289673 )
					float(3) m_vMaxBounds = ( 7.364876, 7.605953, 21.120010 )
					uint(4) m_cRenderColor = ( 0, 0, 0, 0 )
				},
				CVhitBox
				{
					string m_name = "bone_foot_r"
					string m_sSurfaceProperty = ""
					int m_nGroupId = 0
					string m_sBoneName = "bone_foot_r"
					float(3) m_vMinBounds = ( -6.887997, -18.277473, -9.403534 )
					float(3) m_vMaxBounds = ( 4.562469, 7.139837, -0.179348 )
					uint(4) m_cRenderColor = ( 0, 0, 0, 0 )
				},
				CVhitBox
				{
					string m_name = "bone_foot_l"
					string m_sSurfaceProperty = ""
					int m_nGroupId = 0
					string m_sBoneName = "bone_foot_l"
					float(3) m_vMinBounds = ( -4.562501, -18.277477, -9.403534 )
					float(3) m_vMaxBounds = ( 6.887995, 7.139835, -0.179348 )
					uint(4) m_cRenderColor = ( 0, 0, 0, 0 )
				}
			]
		}
	]
}

CVattachmentList CVattachmentList_0
{
	string m_name = ""
	CVattachment[] m_attachments = 
	[
		CVattachment
		{
			string m_name = "attach_hitloc"
			CVattachmentInfluence[] m_influences = 
			[
				CVattachmentInfluence
				{
					string m_influenceName = "bone_chest"
					float(3) m_vTranslationOffset = ( 0.000000, 0.000000, 0.000000 )
					float(3) m_vRotationOffset = ( 0.000000, 0.000000, 0.000000 )
					float m_flWeight = 1.000000
					bool m_bRoot = false
				}
			]
		}
	]
}

CVanimGroup CVanimGroup_0
{
	string m_Name = ""
	CVReferenceSkeletonReference m_pReferenceSkeleton = CVReferenceSkeletonReference
	{
		CVReferenceSkeleton* m_pObject = NULL
		string m_sFileName = ""
	}
	CVBoneFlagListReference m_pBoneFlagList = CVBoneFlagListReference
	{
		CVBoneFlagList* m_pObject = NULL
		string m_sFileName = ""
	}
	CVseqGroupReference m_pSeqGroup = CVseqGroupReference
	{
		CVseqGroup* m_pObject = NULL
		string m_sFileName = ""
	}
	CVanimGroupReference[] m_pAnimGroups = 
	[
		
	]
	CVanim[] m_Vanim = 
	[
		CVanim
		{
			string m_Animationname = "ta_anim_idle"
			string m_Filepath = "models/true_assassin/ta_anim.FBX"
			int m_nStartframe = 5
			int m_nEndframe = 115
			float m_flFps = 30.000000
			CAnimationLoop m_Loop = CAnimationLoop
			{
				bool m_bLoop = true
				bool m_bSmoothLoop = false
				int m_nSmoothLoopStart = 0
				int m_nSmoothLoopEnd = 0
				CVAnimCmdStartLoop m_StartLoop = CVAnimCmdStartLoop
				{
					bool m_bEnabled = false
					int m_nLoopRestart = 0
				}
			}
			bool m_bHidden = false
			CActivity[] m_Activities = 
			[
				CActivity
				{
					string m_Name = "ACT_DOTA_IDLE"
					int m_nWeight = 1
				}
			]
			CAnimationEvent[] m_AnimationEvents = 
			[
				
			]
			CMotionFrame[] m_MotionFrames = 
			[
				
			]
			CIKrule*[] m_pIkRules = 
			[
				
			]
			CAlignAnimation* m_pAlignAnimation = NULL
			CAdjustAnimation m_adjustAnimation = CAdjustAnimation
			{
				float(3) m_translation = ( 0.000000, 0.000000, 0.000000 )
				float(3) m_rotation = ( 0.000000, 0.000000, 0.000000 )
			}
			string[] m_Keywords = 
			[
				
			]
			CVAnimResourceSequenceParams m_sequenceParams = CVAnimResourceSequenceParams
			{
				float m_flFadeInTime = 0.200000
				float m_flFadeOutTime = 0.200000
			}
		},
		CVanim
		{
			string m_Animationname = "ta_anim_move"
			string m_Filepath = "models/true_assassin/ta_anim.FBX"
			int m_nStartframe = 813
			int m_nEndframe = 843
			float m_flFps = 30.000000
			CAnimationLoop m_Loop = CAnimationLoop
			{
				bool m_bLoop = true
				bool m_bSmoothLoop = false
				int m_nSmoothLoopStart = 0
				int m_nSmoothLoopEnd = 0
				CVAnimCmdStartLoop m_StartLoop = CVAnimCmdStartLoop
				{
					bool m_bEnabled = false
					int m_nLoopRestart = 0
				}
			}
			bool m_bHidden = false
			CActivity[] m_Activities = 
			[
				CActivity
				{
					string m_Name = "ACT_DOTA_RUN"
					int m_nWeight = 1
				}
			]
			CAnimationEvent[] m_AnimationEvents = 
			[
				
			]
			CMotionFrame[] m_MotionFrames = 
			[
				
			]
			CIKrule*[] m_pIkRules = 
			[
				
			]
			CAlignAnimation* m_pAlignAnimation = NULL
			CAdjustAnimation m_adjustAnimation = CAdjustAnimation
			{
				float(3) m_translation = ( 0.000000, 0.000000, 0.000000 )
				float(3) m_rotation = ( 0.000000, 0.000000, 0.000000 )
			}
			string[] m_Keywords = 
			[
				
			]
			CVAnimResourceSequenceParams m_sequenceParams = CVAnimResourceSequenceParams
			{
				float m_flFadeInTime = 0.200000
				float m_flFadeOutTime = 0.200000
			}
		},
		CVanim
		{
			string m_Animationname = "ta_anim_death"
			string m_Filepath = "models/true_assassin/ta_anim.FBX"
			int m_nStartframe = 646
			int m_nEndframe = 770
			float m_flFps = 30.000000
			CAnimationLoop m_Loop = CAnimationLoop
			{
				bool m_bLoop = false
				bool m_bSmoothLoop = false
				int m_nSmoothLoopStart = 0
				int m_nSmoothLoopEnd = 0
				CVAnimCmdStartLoop m_StartLoop = CVAnimCmdStartLoop
				{
					bool m_bEnabled = false
					int m_nLoopRestart = 0
				}
			}
			bool m_bHidden = false
			CActivity[] m_Activities = 
			[
				CActivity
				{
					string m_Name = "ACT_DOTA_DIE"
					int m_nWeight = 1
				}
			]
			CAnimationEvent[] m_AnimationEvents = 
			[
				
			]
			CMotionFrame[] m_MotionFrames = 
			[
				
			]
			CIKrule*[] m_pIkRules = 
			[
				
			]
			CAlignAnimation* m_pAlignAnimation = NULL
			CAdjustAnimation m_adjustAnimation = CAdjustAnimation
			{
				float(3) m_translation = ( 0.000000, 0.000000, 0.000000 )
				float(3) m_rotation = ( 0.000000, 0.000000, 0.000000 )
			}
			string[] m_Keywords = 
			[
				
			]
			CVAnimResourceSequenceParams m_sequenceParams = CVAnimResourceSequenceParams
			{
				float m_flFadeInTime = 0.200000
				float m_flFadeOutTime = 0.200000
			}
		},
		CVanim
		{
			string m_Animationname = "ta_anim_attack"
			string m_Filepath = "models/true_assassin/ta_anim.FBX"
			int m_nStartframe = 860
			int m_nEndframe = 890
			float m_flFps = 30.000000
			CAnimationLoop m_Loop = CAnimationLoop
			{
				bool m_bLoop = false
				bool m_bSmoothLoop = false
				int m_nSmoothLoopStart = 0
				int m_nSmoothLoopEnd = 0
				CVAnimCmdStartLoop m_StartLoop = CVAnimCmdStartLoop
				{
					bool m_bEnabled = false
					int m_nLoopRestart = 0
				}
			}
			bool m_bHidden = false
			CActivity[] m_Activities = 
			[
				CActivity
				{
					string m_Name = "ACT_DOTA_ATTACK"
					int m_nWeight = 1
				}
			]
			CAnimationEvent[] m_AnimationEvents = 
			[
				
			]
			CMotionFrame[] m_MotionFrames = 
			[
				
			]
			CIKrule*[] m_pIkRules = 
			[
				
			]
			CAlignAnimation* m_pAlignAnimation = NULL
			CAdjustAnimation m_adjustAnimation = CAdjustAnimation
			{
				float(3) m_translation = ( 0.000000, 0.000000, 0.000000 )
				float(3) m_rotation = ( 0.000000, 0.000000, 0.000000 )
			}
			string[] m_Keywords = 
			[
				
			]
			CVAnimResourceSequenceParams m_sequenceParams = CVAnimResourceSequenceParams
			{
				float m_flFadeInTime = 0.200000
				float m_flFadeOutTime = 0.200000
			}
		},
		CVanim
		{
			string m_Animationname = "ta_anim_attack_two"
			string m_Filepath = "models/true_assassin/ta_anim.FBX"
			int m_nStartframe = 615
			int m_nEndframe = 645
			float m_flFps = 30.000000
			CAnimationLoop m_Loop = CAnimationLoop
			{
				bool m_bLoop = false
				bool m_bSmoothLoop = false
				int m_nSmoothLoopStart = 0
				int m_nSmoothLoopEnd = 0
				CVAnimCmdStartLoop m_StartLoop = CVAnimCmdStartLoop
				{
					bool m_bEnabled = false
					int m_nLoopRestart = 0
				}
			}
			bool m_bHidden = false
			CActivity[] m_Activities = 
			[
				CActivity
				{
					string m_Name = "ACT_DOTA_CAST_ABILITY_4"
					int m_nWeight = 1
				}
			]
			CAnimationEvent[] m_AnimationEvents = 
			[
				
			]
			CMotionFrame[] m_MotionFrames = 
			[
				
			]
			CIKrule*[] m_pIkRules = 
			[
				
			]
			CAlignAnimation* m_pAlignAnimation = NULL
			CAdjustAnimation m_adjustAnimation = CAdjustAnimation
			{
				float(3) m_translation = ( 0.000000, 0.000000, 0.000000 )
				float(3) m_rotation = ( 0.000000, 0.000000, 0.000000 )
			}
			string[] m_Keywords = 
			[
				
			]
			CVAnimResourceSequenceParams m_sequenceParams = CVAnimResourceSequenceParams
			{
				float m_flFadeInTime = 0.200000
				float m_flFadeOutTime = 0.200000
			}
		},
		CVanim
		{
			string m_Animationname = "ta_anim_snatch"
			string m_Filepath = "models/true_assassin/ta_anim.FBX"
			int m_nStartframe = 1085
			int m_nEndframe = 1110
			float m_flFps = 30.000000
			CAnimationLoop m_Loop = CAnimationLoop
			{
				bool m_bLoop = false
				bool m_bSmoothLoop = false
				int m_nSmoothLoopStart = 0
				int m_nSmoothLoopEnd = 0
				CVAnimCmdStartLoop m_StartLoop = CVAnimCmdStartLoop
				{
					bool m_bEnabled = false
					int m_nLoopRestart = 0
				}
			}
			bool m_bHidden = false
			CActivity[] m_Activities = 
			[
				CActivity
				{
					string m_Name = "ACT_DOTA_CAST_ABILITY_3"
					int m_nWeight = 1
				}
			]
			CAnimationEvent[] m_AnimationEvents = 
			[
				
			]
			CMotionFrame[] m_MotionFrames = 
			[
				
			]
			CIKrule*[] m_pIkRules = 
			[
				
			]
			CAlignAnimation* m_pAlignAnimation = NULL
			CAdjustAnimation m_adjustAnimation = CAdjustAnimation
			{
				float(3) m_translation = ( 0.000000, 0.000000, 0.000000 )
				float(3) m_rotation = ( 0.000000, 0.000000, 0.000000 )
			}
			string[] m_Keywords = 
			[
				
			]
			CVAnimResourceSequenceParams m_sequenceParams = CVAnimResourceSequenceParams
			{
				float m_flFadeInTime = 0.200000
				float m_flFadeOutTime = 0.200000
			}
		},
		CVanim
		{
			string m_Animationname = "ta_anim_cast"
			string m_Filepath = "models/true_assassin/ta_anim.FBX"
			int m_nStartframe = 1115
			int m_nEndframe = 1165
			float m_flFps = 30.000000
			CAnimationLoop m_Loop = CAnimationLoop
			{
				bool m_bLoop = false
				bool m_bSmoothLoop = false
				int m_nSmoothLoopStart = 0
				int m_nSmoothLoopEnd = 0
				CVAnimCmdStartLoop m_StartLoop = CVAnimCmdStartLoop
				{
					bool m_bEnabled = false
					int m_nLoopRestart = 0
				}
			}
			bool m_bHidden = false
			CActivity[] m_Activities = 
			[
				CActivity
				{
					string m_Name = "ACT_DOTA_CAST_ABILITY_6"
					int m_nWeight = 1
				}
			]
			CAnimationEvent[] m_AnimationEvents = 
			[
				
			]
			CMotionFrame[] m_MotionFrames = 
			[
				
			]
			CIKrule*[] m_pIkRules = 
			[
				
			]
			CAlignAnimation* m_pAlignAnimation = NULL
			CAdjustAnimation m_adjustAnimation = CAdjustAnimation
			{
				float(3) m_translation = ( 0.000000, 0.000000, 0.000000 )
				float(3) m_rotation = ( 0.000000, 0.000000, 0.000000 )
			}
			string[] m_Keywords = 
			[
				
			]
			CVAnimResourceSequenceParams m_sequenceParams = CVAnimResourceSequenceParams
			{
				float m_flFadeInTime = 0.200000
				float m_flFadeOutTime = 0.200000
			}
		}
	]
	string[] m_sScripts = 
	[
		
	]
}

CVMaterialRemapList CVMaterialRemapList_0
{
	CVMaterialRemap[] m_vMaterialRemapList = 
	[
		CVMaterialRemap
		{
			string m_sSearchMaterial = "fatejinass1.vmat"
			string m_sReplaceMaterial = "materials/true_assassin/ta_texture.vmat"
		},
		CVMaterialRemap
		{
			string m_sSearchMaterial = "fatejinass2.vmat"
			string m_sReplaceMaterial = "materials/true_assassin/ta_texture.vmat"
		},
		CVMaterialRemap
		{
			string m_sSearchMaterial = "fatejinass4.vmat"
			string m_sReplaceMaterial = "materials/true_assassin/ta_texture.vmat"
		},
		CVMaterialRemap
		{
			string m_sSearchMaterial = "fatejinass3.vmat"
			string m_sReplaceMaterial = "materials/true_assassin/ta_texture.vmat"
		}
	]
}